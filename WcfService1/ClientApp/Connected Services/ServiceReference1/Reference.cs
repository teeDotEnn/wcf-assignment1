//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientApp.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAssignmentService")]
    public interface IAssignmentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/IsPrimeNumber", ReplyAction="http://tempuri.org/IAssignmentService/IsPrimeNumberResponse")]
        bool IsPrimeNumber(int input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/IsPrimeNumber", ReplyAction="http://tempuri.org/IAssignmentService/IsPrimeNumberResponse")]
        System.Threading.Tasks.Task<bool> IsPrimeNumberAsync(int input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/SumOfDigits", ReplyAction="http://tempuri.org/IAssignmentService/SumOfDigitsResponse")]
        int SumOfDigits(int input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/SumOfDigits", ReplyAction="http://tempuri.org/IAssignmentService/SumOfDigitsResponse")]
        System.Threading.Tasks.Task<int> SumOfDigitsAsync(int input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/ReverseString", ReplyAction="http://tempuri.org/IAssignmentService/ReverseStringResponse")]
        string ReverseString(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/ReverseString", ReplyAction="http://tempuri.org/IAssignmentService/ReverseStringResponse")]
        System.Threading.Tasks.Task<string> ReverseStringAsync(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/AddHtmlTag", ReplyAction="http://tempuri.org/IAssignmentService/AddHtmlTagResponse")]
        string AddHtmlTag(string tag, string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/AddHtmlTag", ReplyAction="http://tempuri.org/IAssignmentService/AddHtmlTagResponse")]
        System.Threading.Tasks.Task<string> AddHtmlTagAsync(string tag, string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/SortNumbers", ReplyAction="http://tempuri.org/IAssignmentService/SortNumbersResponse")]
        int[] SortNumbers(int[] numbers, string direction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/SortNumbers", ReplyAction="http://tempuri.org/IAssignmentService/SortNumbersResponse")]
        System.Threading.Tasks.Task<int[]> SortNumbersAsync(int[] numbers, string direction);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAssignmentServiceChannel : ClientApp.ServiceReference1.IAssignmentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AssignmentServiceClient : System.ServiceModel.ClientBase<ClientApp.ServiceReference1.IAssignmentService>, ClientApp.ServiceReference1.IAssignmentService {
        
        public AssignmentServiceClient() {
        }
        
        public AssignmentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AssignmentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AssignmentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AssignmentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsPrimeNumber(int input) {
            return base.Channel.IsPrimeNumber(input);
        }
        
        public System.Threading.Tasks.Task<bool> IsPrimeNumberAsync(int input) {
            return base.Channel.IsPrimeNumberAsync(input);
        }
        
        public int SumOfDigits(int input) {
            return base.Channel.SumOfDigits(input);
        }
        
        public System.Threading.Tasks.Task<int> SumOfDigitsAsync(int input) {
            return base.Channel.SumOfDigitsAsync(input);
        }
        
        public string ReverseString(string input) {
            return base.Channel.ReverseString(input);
        }
        
        public System.Threading.Tasks.Task<string> ReverseStringAsync(string input) {
            return base.Channel.ReverseStringAsync(input);
        }
        
        public string AddHtmlTag(string tag, string data) {
            return base.Channel.AddHtmlTag(tag, data);
        }
        
        public System.Threading.Tasks.Task<string> AddHtmlTagAsync(string tag, string data) {
            return base.Channel.AddHtmlTagAsync(tag, data);
        }
        
        public int[] SortNumbers(int[] numbers, string direction) {
            return base.Channel.SortNumbers(numbers, direction);
        }
        
        public System.Threading.Tasks.Task<int[]> SortNumbersAsync(int[] numbers, string direction) {
            return base.Channel.SortNumbersAsync(numbers, direction);
        }
    }
}
